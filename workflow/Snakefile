import os
from pathlib import Path


if not config:
    raise SystemExit(
        "No config file specified. Use CorGE to generate a "
        "config file, and specify with --configfile"
    )


container: "docker://ctbushman/shotguntree:latest"


DATA_FP = Path(config["DATA"])


TARGET = (
    (
        DATA_FP / "RAxML_bestTree.supermatrix"
        if config["ALG"] == "supermat"
        else DATA_FP / "RAxML_bestTree.outgroup"
    )
    if config["OUTGROUP"]
    else DATA_FP / "RAxML_bestTree.midpoint"
)


rule all:
    input:
        TARGET,


rule align_fasta:
    input:
        expand(
            DATA_FP / "merged-sequences" / "{gene}.fasta",
            gene=config["GENES"],
        ),
    output:
        DATA_FP / "aligned-sequences" / "{gene}.fasta",
    log:
        DATA_FP / "logs" / "align_fasta" / "{gene}.log",
    params:
        data=config["DATA"],
    conda:
        "envs/muscle_env.yaml"
    shell:
        "muscle -in {params.data}/merged-sequences/{wildcards.gene}.fasta -out {params.data}/aligned-sequences/{wildcards.gene}.fasta 2>&1 | tee {log}"


rule reduce_alignments_stats:
    input:
        DATA_FP / "aligned-sequences" / "{gene}.fasta",
    output:
        DATA_FP / "aligned-sequences" / "{gene}.stats",
    log:
        DATA_FP / "logs" / "reduce_alignments" / "{gene}-stats.log",
    script:
        "scripts/reduce_alignments_stats.py"


rule reduce_alignments:
    input:
        seqs=DATA_FP / "aligned-sequences" / "{gene}.fasta",
        stats=DATA_FP / "aligned-sequences" / "{gene}.stats",
    output:
        DATA_FP / "aligned-sequences" / "{gene}.reduced",
    log:
        DATA_FP / "logs" / "reduce_alignments " / "{gene}.log",
    params:
        bps=config["BPS"],
    script:
        "scripts/reduce_alignments.py"


rule create_trees:
    input:
        DATA_FP / "aligned-sequences" / "{gene}.fasta",
    output:
        DATA_FP / "trees" / "RAxML_bestTree.{gene}",
    log:
        DATA_FP / "logs" / "prot_create_trees" / "RAxML_bestTree.{gene}.log",
    conda:
        "envs/raxml_env.yaml"
    params:
        alg="PROTCATLG" if config["TYPE"] == "prot" else "GTRCAT",
        out=config["DATA"],
    shell:
        "raxmlHPC -s {input} -m {params.alg} -n {wildcards.gene} -p 392781 -w {params.out}/trees 2>&1 | tee {log}"


rule install_astral:
    output:
        DATA_FP / ".Astral.installed",
    conda:
        "envs/openjdk_env.yaml"
    shell:
        """
        if [ -d Astral/ ] then
            echo "Astral already installed"
        else
            wget https://github.com/smirarab/ASTRAL/raw/master/Astral.5.7.8.zip
            unzip Astral.5.7.8.zip
            rm Astral.5.7.8.zip
        fi

        touch {output}
        """


rule merge_trees:
    input:
        trees=expand(DATA_FP / "trees" / "RAxML_bestTree.{gene}", gene=config["GENES"]),
        installed=DATA_FP / ".Astral.installed",
    output:
        merged=DATA_FP / "trees" / "merged.in",
        tree=DATA_FP / "trees" / "final.unrooted",
    log:
        DATA_FP / "logs" / "merge_trees" / "final.rooted.log",
    conda:
        "envs/openjdk_env.yaml"
    shell:
        """
        cat {input.trees} > {output.merged}
        java -jar Astral/astral.5.7.8.jar -i {output.merged} -o {output.tree} 2>&1 | tee {log}
        """


rule infer_weights:
    input:
        DATA_FP / "trees" / "final.unrooted",
    output:
        DATA_FP / "trees" / "iqtree.treefile",
    log:
        DATA_FP / "logs" / "infer_weights" / "iqtree.treefile.log",
    conda:
        "envs/iqtree_env.yaml"
    params:
        ref=config["GENES"][0],
        alg="-m MFP" if config["TYPE"] == "prot" else "-m HKY+F",
        out=config["DATA"],
    shell:
        "iqtree -s {params.out}/aligned-sequences/{params.ref}.fasta -pre {params.out}/trees/iqtree {params.alg} -g {input} 2>&1 | tee {log}"


rule create_supermatrix:
    input:
        expand(DATA_FP / "aligned-sequences" / "{gene}.reduced", gene=config["GENES"]),
    output:
        DATA_FP / "supermatrices" / "supermatrix.fasta",
    log:
        DATA_FP / "logs" / "create_supermatrix" / "supermatrix.log",
    script:
        "scripts/create_supermatrix.py"


rule supermat_root_tree:
    input:
        alignment=DATA_FP / "supermatrices" / "supermatrix.fasta",
    output:
        DATA_FP / "RAxML_bestTree.supermatrix",
    log:
        DATA_FP / "logs" / "create_trees" / "RAxML_supermatrixRootedTree.final.log",
    conda:
        "envs/raxml_env.yaml"
    params:
        alg="PROTCATLG" if config["TYPE"] == "prot" else "GTRCAT",
        outgroup=config["OUTGROUP"],
        out=config["DATA"],
    shell:
        "raxmlHPC -s {input} -o {params.outgroup} -m {params.alg} -n supermatrix -p 392781 -w {params.out} 2>&1 | tee {log}"


rule outgroup_root_tree:
    input:
        DATA_FP / "trees" / "iqtree.treefile",
    output:
        DATA_FP / "RAxML_bestTree.outgroup",
    log:
        DATA_FP / "logs" / "root_tree" / "RAxML_rootedTree.final.log",
    params:
        ref=config["GENES"][0],
        alg="PROTCATLG" if config["TYPE"] == "prot" else "GTRCAT",
        outgroup=config["OUTGROUP"],
        out=config["DATA"],
    conda:
        "envs/raxml_env.yaml"
    shell:
        "raxmlHPC -s {params.out}/aligned-sequences/{params.ref}.fasta -o {params.outgroup} -m {params.alg} -t {input} -n outgroup -w {params.out} 2>&1 | tee {log}"


rule midpoint_root_tree:
    input:
        DATA_FP / "trees" / "iqtree.treefile",
    output:
        DATA_FP / "RAxML_bestTree.midpoint",
    log:
        DATA_FP / "logs" / "root_tree" / "RAxML_rootedTree.final.log",
    params:
        ref=config["GENES"][0],
        alg="PROTCATLG" if config["TYPE"] == "prot" else "GTRCAT",
        out=config["DATA"],
    conda:
        "envs/raxml_env.yaml"
    shell:
        "raxmlHPC -f I -m {params.alg} -t {input} -n midpoint -w {params.out} 2>&1 | tee {log}"
