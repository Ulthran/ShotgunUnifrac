configfile: "config.yml"


container: "docker://ctbushman/shotguntree:latest"


TARGET = (
    ("RAxML_supermatrixRootedTree.final" if config["ALG"] == "supermat" else "RAxML_outgroupRootedTree.final")
    if config["OUTGROUP"]
    else "RAxML_midpointRootedTree.final"
)


rule all:
    input:
        TARGET,


rule align_fasta:
    input:
        "merged-sequences/{gene}.fasta",
    output:
        "aligned-sequences/{gene}.fasta",
    log:
        "logs/align_fasta/{gene}.log",
    conda:
        "envs/muscle_env.yaml"
    shell:
        # Consider adding filtering here as well
        "muscle -in merged-sequences/{wildcards.gene}.fasta -out aligned-sequences/{wildcards.gene}.fasta"


rule create_trees:
    input:
        "aligned-sequences/{gene}.fasta",
    output:
        "trees/RAxML_bestTree.{gene}",
    log:
        "logs/prot_create_trees/RAxML_bestTree.{gene}.log",
    conda:
        "envs/raxml_env.yaml"
    params:
        alg='PROTCATLG' if config["TYPE"] == 'prot' else 'GTRCAT',
    shell:
        "cd trees/ && "
        "raxmlHPC -s ../{input} -m {params.alg} -n {wildcards.gene} -p 392781 && "
        "cd .."


rule merge_trees:
    input:
        expand("trees/RAxML_bestTree.{gene}", gene=config["GENES"]),
    output:
        "trees/final.unrooted",
    log:
        "logs/merge_trees/final.rooted.log",
    conda:
        "envs/openjdk_env.yaml"
    shell:
        "cat {input} > trees/merged.in && "
        "java -jar Astral/astral.5.7.8.jar -i trees/merged.in -o trees/final.unrooted 2>logs/merge_trees/final.unrooted.out.log"


rule infer_weights:
    input:
        "trees/final.unrooted",
    output:
        "trees/iqtree.treefile",
    log:
        "logs/infer_weights/iqtree.treefile.log",
    conda:
        "envs/iqtree_env.yaml"
    params:
        ref=config["GENES"][0],
        alg='-m MFP' if config["TYPE"] == 'prot' else '-m HKY+F',
    shell:
        "iqtree -s aligned-sequences/{params.ref}.fasta -pre trees/iqtree {params.alg} -g trees/final.unrooted"


rule create_supermatrix:
    input:
        expand("aligned-sequences/{gene}.fasta", gene=config["GENES"]),
    output:
        "supermatrices/supermatrix.fasta",
    log:
        "logs/create_supermatrix/supermatrix.log",
    script:
        "scripts/create_supermatrix.py"


rule supermat_root_tree:
    input:
        tree = "trees/RAxML_bestTree.supermatrix",
        alignment = "supermatrices/supermatrix.fasta",
    output:
        "RAxML_supermatrixRootedTree.final",
    log:
        "logs/create_trees/RAxML_supermatrixRootedTree.final.log",
    conda:
        "envs/raxml_env.yaml"
    params:
        alg='PROTCATLG' if config["TYPE"] == 'prot' else 'GTRCAT',
        outgroup=config["OUTGROUP"],
    shell:
        "cd trees/ && "
        "raxmlHPC -s ../{input} -o {params.outgroup} -m {params.alg} -n supermatrix -p 392781 && "
        "mv RAxML_result.supermatrix {output}"


rule outgroup_root_tree:
    input:
        "trees/iqtree.treefile",
    output:
        "RAxML_outgroupRootedTree.final",
    log:
        "logs/root_tree/RAxML_rootedTree.final.log",
    params:
        ref=config["GENES"][0],
        alg='PROTCATLG' if config["TYPE"] == 'prot' else 'GTRCAT',
        outgroup=config["OUTGROUP"],
    conda:
        "envs/raxml_env.yaml"
    shell:
        "cd trees/ && "
        "raxmlHPC -s ../aligned-sequences/{params.ref}.fasta -o {params.outgroup} -m {params.alg} -t iqtree.treefile -n final && "
        "mv RAxML_result.final ../{output}"


rule midpoint_root_tree:
    input:
        "trees/iqtree.treefile",
    output:
        "RAxML_midpointRootedTree.final",
    log:
        "logs/root_tree/RAxML_rootedTree.final.log",
    params:
        ref=config["GENES"][0],
        alg='PROTCATLG' if config["TYPE"] == 'prot' else 'GTRCAT',
    conda:
        "envs/raxml_env.yaml"
    shell:
        "cd trees/ && "
        "raxmlHPC -f I -m {params.alg} -t iqtree.treefile -n final && "
        "mv RAxML_result.final ../{output}"
